(function (d3) {
  'use strict';

  const colorLegend = (selection, props) => {
    const {
      colorScale,
      circleRadius,
      spacing,
      textOffset
    } = props;

    const groups = selection.selectAll('g')
      .data(colorScale.domain());
    const groupsEnter = groups
      .enter().append('g')
        .attr('class', 'tick');
    groupsEnter
      .merge(groups)
        .attr('transform', (d, i) =>
          `translate(0, ${i * spacing})`
        );
    groups.exit().remove();

    groupsEnter.append('circle')
      .merge(groups.select('circle'))
        .attr('r', circleRadius)
        .attr('fill', colorScale);

    groupsEnter.append('text')
      .merge(groups.select('text'))
        .text(d => d)
        .attr('dy', '0.32em')
        .attr('x', textOffset);
  };

  const svg = d3.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');

  const render = (data) => {

    const xValue = (d) => d.timestamp;
    const xAxisLabel = 'Year';

    const yValue = (d) => d.rate;
    const yAxisLabel = 'Ratio';

    const colorValue = (d) => d.city;

    const margin = {
      top: 80,
      right: 50,
      bottom: 88,
      left: 105,
    };
    const innerWidth =
      width - margin.left - margin.right;
    const innerHeight =
      height - margin.top - margin.bottom;

    const xScale = d3.scaleTime()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth]);

    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, yValue))
      .range([innerHeight, 0])
      .nice();

    const colorScale = d3.scaleOrdinal(
      d3.schemeCategory10
    );

    const g = svg
      .append('g')
      .attr(
        'transform',
        `translate(${margin.left},${margin.top})`
      );
    //f
    const xAxis = d3.axisBottom(xScale)
      .tickSize(-innerHeight)
      .tickPadding(15);

    const yAxis = d3.axisLeft(yScale)
      .tickSize(-innerWidth)
      .tickPadding(10);

    const yAxisG = g.append('g').call(yAxis);
    //yAxisG.selectAll('.domain').remove();

    yAxisG
      .append('text')
      .attr('class', 'axis-label')
      .attr('y', -40)
      .attr('x', -innerHeight / 2)
      .attr('fill', 'black')
      .attr('transform', `rotate(-90)`)
      .attr('text-anchor', 'middle')
      .text(yAxisLabel);

    const xAxisG = g
      .append('g')
      .call(xAxis)
      .attr(
        'transform',
        `translate(0,${innerHeight})`
      );
    xAxisG.select('.domain').remove();

    xAxisG
      .append('text')
      .attr('class', 'axis-label')
      .attr('y', 60)
      .attr('x', innerWidth / 2)
      .attr('fill', 'black')
      .text(xAxisLabel);

    const lineGenerator = d3.line()
      .x((d) => xScale(xValue(d)))
      .y((d) => yScale(yValue(d)))
      .curve(d3.curveBasis);

    const lastYValue = (d) =>
      yValue(d.values[d.values.length - 1]);

    const nested = d3.nest()
      .key(colorValue)
      .entries(data)
      .sort((a, b) =>
        d3.descending(lastYValue(a), lastYValue(b))
      );

    console.log(nested);

    colorScale.domain(nested.map((d) => d.key));

    g.selectAll('.line-path')
      .data(nested)
      .enter()
      .append('path')
      .attr('class', 'line-path')
      .attr('d', (d) => lineGenerator(d.values))
      .attr('stroke', (d) => colorScale(d.key));

    g.append('text')
      .attr('class', 'title')
      .attr('y', -20)
      .attr('x', innerWidth / 5)
      .text(title);

    svg
      .append('g')
      .attr('transform', `translate(790,100)`)
      .call(colorLegend, {
        colorScale,
        circleRadius: 10,
        spacing: 30,
        textOffset: 15,
      });
  };

  d3.csv(
    'https://raw.githubusercontent.com/chawinkk/dataForclass-HW/main/unemploymentrate_DE%20Muitipleline.csv'
  ).then((data) => {
    data.forEach((d) => {
      d.rate = +d.rate;
      d.timestamp = new Date(d.timestamp);
    });
    render(data);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,