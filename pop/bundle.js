(function (d3$1) {
  'use strict';

  const xAxisLabelText = 'Population';

  const svg = d3$1.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');

  const render = data => {
    const xValue = d => d['population'];
    const yValue = d => d.country;
    const margin = { top: 50, right: 40, bottom: 80, left: 150 };
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    //where the rectangle start
    const xScale = d3$1.scaleLinear()
      .domain([1, d3$1.max(data, xValue)])//normally start from zero
      .range([0, innerWidth]);
    
   //size of the rechtangle 
    const yScale = d3$1.scaleBand()
      .domain(data.map(yValue))
      .range([0, innerHeight])
      .padding(0.50);
   
    //margin left and top
    const g = svg.append('g')
      .attr('transform', `translate(${margin.left},${margin.top})`);
    
    //custom the xaxis format
    const xAxisTickFormat = number =>
      d3$1.format('.3s')(number)
        .replace('G', 'B');
    
   // 
    const xAxis = d3$1.axisBottom(xScale)
      .tickFormat(xAxisTickFormat)
      .tickSize(-innerHeight);
    
    //remove the tickline
    g.append('g')
      .call(d3$1.axisLeft(yScale))
      .selectAll('.tick line')
        .remove();
    
    const xAxisG = g.append('g').call(xAxis)
      .attr('transform', `translate(0,${innerHeight})`);
    
    xAxisG.select('.domain').remove();
    
    xAxisG.append('text')
        .attr('class', 'axis-label')
        .attr('y', 50)
        .attr('x', innerWidth / 2)
        .attr('fill', '#2E86C1')
        .text(xAxisLabelText);
    
    g.selectAll('rect').data(data)
      .enter().append('rect')
        .attr('y', d => yScale(yValue(d)))
        .attr('width', d => xScale(xValue(d)))
        .attr('height', yScale.bandwidth())         
      .attr("fill",function(d){
                return "black";})
           .on("mouseover",function(){
              d3.select(this)
                .attr("fill","orange");
          })
           .on("mouseout",function(d){
              d3.select(this)
                .transition()
                .duration(250)
                .attr("fill","black");
          });  
    g.append('text')
        .attr('class', 'title')
          .attr('fill', '#2E86C1')
    .attr('x',innerWidth / 3)
        .attr('y', -10)
        .text(titleText);
  };
  //1----------------------------------------------------
  d3$1.csv('data.csv').then(data => {
    data.forEach(d => {
      d.population = +d.population ; //d.population = +d.population change string to number
    });
    render(data);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHNlbGVjdCxcbiAgY3N2LFxuICBzY2FsZUxpbmVhcixcbiAgbWF4LFxuICBzY2FsZUJhbmQsXG4gIGF4aXNMZWZ0LFxuICBheGlzQm90dG9tLFxuICBmb3JtYXRcbn0gZnJvbSAnZDMnO1xuXG5jb25zdCB0aXRsZVRleHQgPSAnVG9wIDMwIENvdW50cmllcyBieSBwcm9wdWxhdGlvbic7XG5jb25zdCB4QXhpc0xhYmVsVGV4dCA9ICdQb3B1bGF0aW9uJztcblxuY29uc3Qgc3ZnID0gc2VsZWN0KCdzdmcnKTtcblxuY29uc3Qgd2lkdGggPSArc3ZnLmF0dHIoJ3dpZHRoJyk7XG5jb25zdCBoZWlnaHQgPSArc3ZnLmF0dHIoJ2hlaWdodCcpO1xuXG5jb25zdCByZW5kZXIgPSBkYXRhID0+IHtcbiAgY29uc3QgeFZhbHVlID0gZCA9PiBkWydwb3B1bGF0aW9uJ107XG4gIGNvbnN0IHlWYWx1ZSA9IGQgPT4gZC5jb3VudHJ5O1xuICBjb25zdCBtYXJnaW4gPSB7IHRvcDogNTAsIHJpZ2h0OiA0MCwgYm90dG9tOiA4MCwgbGVmdDogMTUwIH07XG4gIGNvbnN0IGlubmVyV2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICBjb25zdCBpbm5lckhlaWdodCA9IGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuICBcbiAgLy93aGVyZSB0aGUgcmVjdGFuZ2xlIHN0YXJ0XG4gIGNvbnN0IHhTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAuZG9tYWluKFsxLCBtYXgoZGF0YSwgeFZhbHVlKV0pLy9ub3JtYWxseSBzdGFydCBmcm9tIHplcm9cbiAgICAucmFuZ2UoWzAsIGlubmVyV2lkdGhdKTtcbiAgXG4gLy9zaXplIG9mIHRoZSByZWNodGFuZ2xlIFxuICBjb25zdCB5U2NhbGUgPSBzY2FsZUJhbmQoKVxuICAgIC5kb21haW4oZGF0YS5tYXAoeVZhbHVlKSlcbiAgICAucmFuZ2UoWzAsIGlubmVySGVpZ2h0XSlcbiAgICAucGFkZGluZygwLjUwKTtcbiBcbiAgLy9tYXJnaW4gbGVmdCBhbmQgdG9wXG4gIGNvbnN0IGcgPSBzdmcuYXBwZW5kKCdnJylcbiAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xuICBcbiAgLy9jdXN0b20gdGhlIHhheGlzIGZvcm1hdFxuICBjb25zdCB4QXhpc1RpY2tGb3JtYXQgPSBudW1iZXIgPT5cbiAgICBmb3JtYXQoJy4zcycpKG51bWJlcilcbiAgICAgIC5yZXBsYWNlKCdHJywgJ0InKTtcbiAgXG4gLy8gXG4gIGNvbnN0IHhBeGlzID0gYXhpc0JvdHRvbSh4U2NhbGUpXG4gICAgLnRpY2tGb3JtYXQoeEF4aXNUaWNrRm9ybWF0KVxuICAgIC50aWNrU2l6ZSgtaW5uZXJIZWlnaHQpO1xuICBcbiAgLy9yZW1vdmUgdGhlIHRpY2tsaW5lXG4gIGcuYXBwZW5kKCdnJylcbiAgICAuY2FsbChheGlzTGVmdCh5U2NhbGUpKVxuICAgIC5zZWxlY3RBbGwoJy50aWNrIGxpbmUnKVxuICAgICAgLnJlbW92ZSgpO1xuICBcbiAgY29uc3QgeEF4aXNHID0gZy5hcHBlbmQoJ2cnKS5jYWxsKHhBeGlzKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYCk7XG4gIFxuICB4QXhpc0cuc2VsZWN0KCcuZG9tYWluJykucmVtb3ZlKCk7XG4gIFxuICB4QXhpc0cuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdheGlzLWxhYmVsJylcbiAgICAgIC5hdHRyKCd5JywgNTApXG4gICAgICAuYXR0cigneCcsIGlubmVyV2lkdGggLyAyKVxuICAgICAgLmF0dHIoJ2ZpbGwnLCAnIzJFODZDMScpXG4gICAgICAudGV4dCh4QXhpc0xhYmVsVGV4dCk7XG4gIFxuICBnLnNlbGVjdEFsbCgncmVjdCcpLmRhdGEoZGF0YSlcbiAgICAuZW50ZXIoKS5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmF0dHIoJ3knLCBkID0+IHlTY2FsZSh5VmFsdWUoZCkpKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgZCA9PiB4U2NhbGUoeFZhbHVlKGQpKSlcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCB5U2NhbGUuYmFuZHdpZHRoKCkpICAgICAgICAgXG4gICAgLmF0dHIoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgIHJldHVybiBcImJsYWNrXCI7fSlcbiAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsXCJvcmFuZ2VcIik7XG4gICAgICAgIH0pXG4gICAgICAgICAub24oXCJtb3VzZW91dFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgLmR1cmF0aW9uKDI1MClcbiAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsXCJibGFja1wiKTtcbiAgICAgICAgfSk7O1xuICBcbiAgZy5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3RpdGxlJylcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnIzJFODZDMScpXG4gIC5hdHRyKCd4Jyxpbm5lcldpZHRoIC8gMylcbiAgICAgIC5hdHRyKCd5JywgLTEwKVxuICAgICAgLnRleHQodGl0bGVUZXh0KTtcbn07XG4vLzEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5jc3YoJ2RhdGEuY3N2JykudGhlbihkYXRhID0+IHtcbiAgZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgIGQucG9wdWxhdGlvbiA9ICtkLnBvcHVsYXRpb24gOyAvL2QucG9wdWxhdGlvbiA9ICtkLnBvcHVsYXRpb24gY2hhbmdlIHN0cmluZyB0byBudW1iZXJcbiAgfSk7XG4gIHJlbmRlcihkYXRhKTtcbn0pOyJdLCJuYW1lcyI6WyJzZWxlY3QiLCJzY2FsZUxpbmVhciIsIm1heCIsInNjYWxlQmFuZCIsImZvcm1hdCIsImF4aXNCb3R0b20iLCJheGlzTGVmdCIsImNzdiJdLCJtYXBwaW5ncyI6Ijs7O0VBV0EsTUFBTSxTQUFTLEdBQUcsaUNBQWlDLENBQUM7RUFDcEQsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDO0FBQ3BDO0VBQ0EsTUFBTSxHQUFHLEdBQUdBLFdBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQjtFQUNBLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUNqQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkM7RUFDQSxNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUk7RUFDdkIsRUFBRSxNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0VBQ3RDLEVBQUUsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUM7RUFDaEMsRUFBRSxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztFQUMvRCxFQUFFLE1BQU0sVUFBVSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7RUFDeEQsRUFBRSxNQUFNLFdBQVcsR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0VBQzFEO0VBQ0E7RUFDQSxFQUFFLE1BQU0sTUFBTSxHQUFHQyxnQkFBVyxFQUFFO0VBQzlCLEtB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